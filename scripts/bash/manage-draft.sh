#!/usr/bin/env bash

set -euo pipefail

JSON_MODE=false
AUTO_COUNT=""
for arg in "$@"; do
    case "$arg" in
        --json)
            JSON_MODE=true
            ;;
        --help|-h)
            cat <<'USAGE'
Usage: $0 [--json]
  --json    Output machine-readable JSON
USAGE
            exit 0
            ;;
        --auto-count=*)
            AUTO_COUNT="${arg#*=}"
            ;;
        *) ;;
    esac
done

find_repo_root() {
    local dir="${1:-$(pwd)}"
    while [[ "$dir" != "/" ]]; do
        if [[ -d "$dir/.git" ]] || [[ -d "$dir/chapters" ]] || [[ -d "$dir/.specify" ]]; then
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    return 1
}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(find_repo_root "$SCRIPT_DIR" 2>/dev/null || true)"
if [[ -z "$REPO_ROOT" ]]; then
    echo "Error: could not determine repository root" >&2
    exit 1
fi

CHAPTERS_DIR="$REPO_ROOT/chapters"
DRAFT_DIR="$CHAPTERS_DIR/draft"
FINAL_DIR="$CHAPTERS_DIR/final"
PLAN_DIR="$CHAPTERS_DIR/plan"
EDITOR_DIR="$CHAPTERS_DIR/editor"
TIMELINE_DIR="$REPO_ROOT/timelines"
LOG_DIR="$REPO_ROOT/logs/adaptations"

mkdir -p "$DRAFT_DIR" "$FINAL_DIR" "$PLAN_DIR" "$EDITOR_DIR" "$TIMELINE_DIR" "$LOG_DIR"

# Determine next chapter number from final manuscripts (authoritative)
next_number=1
last_chapter_file=$(find "$FINAL_DIR" -maxdepth 1 -type f -name 'chapter_*_final.md' | sort | tail -n 1 || true)
if [[ -n "$last_chapter_file" ]]; then
    base=$(basename "$last_chapter_file")
    number=$(echo "$base" | sed -E 's/chapter_([0-9]{3})_final\.md/\1/')
    if [[ -n "$number" ]]; then
        next_number=$((10#$number + 1))
    fi
fi

chapter_slug=$(printf "chapter_%03d" "$next_number")
DRAFT_FILE="$DRAFT_DIR/${chapter_slug}_draft.md"
FINAL_FILE="$FINAL_DIR/${chapter_slug}_final.md"
PLAN_FILE="$PLAN_DIR/${chapter_slug}_plan.md"
EDITOR_LOG_FILE="$EDITOR_DIR/${chapter_slug}_editor.md"

# Collect the most recent finalised chapters to use as continuity references
RECENT_FINALS_LIMIT=3
RECENT_FINALS=()
while IFS= read -r file; do
    [[ -z "$file" ]] && continue
    RECENT_FINALS+=("$file")
done < <(find "$FINAL_DIR" -maxdepth 1 -type f -name 'chapter_*_final.md' \
    | sort | tail -n "$RECENT_FINALS_LIMIT")

build_recent_json() {
    local first=true
    local json="["
    for file in "${RECENT_FINALS[@]}"; do
        [[ -z "$file" ]] && continue
        local escaped=$(printf '%s' "$file" | sed 's/\\/\\\\/g; s/"/\\"/g')
        if $first; then
            json+="\"$escaped\""
            first=false
        else
            json+="\",\"$escaped\""
        fi
    done
    json+="]"
    printf '%s' "$json"
}

if [[ ! -f "$DRAFT_FILE" ]]; then
    cat <<'DRAFT_HEADER' > "$DRAFT_FILE"
# ${chapter_slug//_/ }

<!-- Draft manuscript generated by /draft -->
DRAFT_HEADER
fi

if [[ ! -f "$PLAN_FILE" ]]; then
    TEMPLATE="$REPO_ROOT/.specify/templates/story/chapter-plan-template.md"
    if [[ -f "$TEMPLATE" ]]; then
        sed \
            -e "s/\[CHAPTER_SLUG\]/${chapter_slug//_/ }/" \
            "$TEMPLATE" > "$PLAN_FILE"
    else
        cat <<'PLAN' > "$PLAN_FILE"
# Chapter Plan ${chapter_slug//_/ }

## 章节概览
- 待主编填写

## 参考资料
- 待主编填写

## 分段结构
- 待主编填写

## 人物要点
- 待主编填写

## 情节要素
- 待主编填写

## 风险与提醒
- 待主编填写
PLAN
    fi
fi

if [[ ! -f "$EDITOR_LOG_FILE" ]]; then
    TEMPLATE="$REPO_ROOT/.specify/templates/story/editor-review-template.md"
    if [[ -f "$TEMPLATE" ]]; then
        sed \
            -e "s/\[CHAPTER_SLUG\]/${chapter_slug//_/ }/" \
            -e "s/\[ROUND\]/1/" \
            "$TEMPLATE" > "$EDITOR_LOG_FILE"
    else
        cat <<'EDITLOG' > "$EDITOR_LOG_FILE"
# Editor Review ${chapter_slug//_/ }

- 审稿轮次：第 1 次
- 状态：待填写
EDITLOG
    fi
fi

# Decide which timeline file to use (30 chapter windows or size constraint)
range_start=$(( ((next_number - 1) / 30) * 30 + 1 ))
range_end=$((range_start + 29))
start_label=$(printf "%03d" "$range_start")
end_label=$(printf "%03d" "$range_end")
timeline_file="$TIMELINE_DIR/timeline_${start_label}-${end_label}.md"

if [[ -f "$timeline_file" ]]; then
    size_bytes=$(wc -c < "$timeline_file" | tr -d ' ')
    if [[ "$size_bytes" -ge 80000 ]]; then
        range_start=$((range_end + 1))
        range_end=$((range_start + 29))
        start_label=$(printf "%03d" "$range_start")
        end_label=$(printf "%03d" "$range_end")
        timeline_file="$TIMELINE_DIR/timeline_${start_label}-${end_label}.md"
    fi
fi

if [[ ! -f "$timeline_file" ]]; then
    TEMPLATE="$REPO_ROOT/.specify/templates/story/timeline-template.md"
    if [[ -f "$TEMPLATE" ]]; then
        sed "s/\[RANGE\]/${start_label}-${end_label}/" "$TEMPLATE" > "$timeline_file"
    else
        cat <<'TL' > "$timeline_file"
# Narrative Timeline ${start_label}-${end_label}

| Chapter | Time & Location | POV | Key Events | Consequences |
| ------- | ---------------- | --- | ---------- | ------------ |
TL
    fi
fi

# Ensure adaptation log has first volume
adaptation_index="$LOG_DIR/index.md"
if [[ ! -f "$adaptation_index" ]]; then
    cat <<'IDX' > "$adaptation_index"
# Adaptation Log Index

- [adaptations_001-050.md](adaptations_001-050.md)
IDX
fi

first_volume="$LOG_DIR/adaptations_001-050.md"
if [[ ! -f "$first_volume" ]]; then
    TEMPLATE="$REPO_ROOT/.specify/templates/story/adaptation-log-template.md"
    if [[ -f "$TEMPLATE" ]]; then
        sed "s/\[RANGE\]/001-050/" "$TEMPLATE" > "$first_volume"
    else
        cat <<'LOG' > "$first_volume"
# Adaptation Log 001-050

| Entry | Date | Trigger | Affected Artifacts | Summary |
| ----- | ---- | ------- | ------------------ | ------- |
LOG
    fi
fi

RECENT_FINALS_JSON=$(build_recent_json)

AUTO_COUNT_VALUE=0
if [[ -n "$AUTO_COUNT" ]]; then
    if [[ "$AUTO_COUNT" =~ ^[0-9]+$ ]]; then
        AUTO_COUNT_VALUE=$AUTO_COUNT
    fi
fi

if $JSON_MODE; then
    printf '{"REPO_ROOT":"%s","NEXT_CHAPTER":"%s","DRAFT_FILE":"%s","FINAL_FILE":"%s","TIMELINE_FILE":"%s","ADAPTATION_LOG":"%s","PLAN_FILE":"%s","EDITOR_LOG":"%s","RECENT_FINALS":%s,"AUTO_COUNT":%d}\n' \
        "$REPO_ROOT" "$chapter_slug" "$DRAFT_FILE" "$FINAL_FILE" "$timeline_file" "$first_volume" "$PLAN_FILE" "$EDITOR_LOG_FILE" "$RECENT_FINALS_JSON" "$AUTO_COUNT_VALUE"
else
    cat <<'INFO'
REPO_ROOT: $REPO_ROOT
NEXT_CHAPTER: $chapter_slug
DRAFT_FILE: $DRAFT_FILE
FINAL_FILE: $FINAL_FILE
TIMELINE_FILE: $timeline_file
ADAPTATION_LOG: $first_volume
PLAN_FILE: $PLAN_FILE
EDITOR_LOG: $EDITOR_LOG_FILE
AUTO_COUNT: $AUTO_COUNT_VALUE
RECENT_FINALS:
INFO
    if ((${#RECENT_FINALS[@]})); then
        for file in "${RECENT_FINALS[@]}"; do
            echo "  - $file"
        done
    else
        echo "  - (none yet)"
    fi
fi
