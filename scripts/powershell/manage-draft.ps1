#!/usr/bin/env pwsh
[CmdletBinding()]
param(
    [switch]$Json,
    [int]$AutoCount = 0
)
$ErrorActionPreference = 'Stop'

function Find-RepositoryRoot {
    param(
        [string]$StartDir,
        [string[]]$Markers = @('.git', '.specify', 'chapters')
    )
    $current = Resolve-Path $StartDir
    while ($true) {
        foreach ($marker in $Markers) {
            if (Test-Path (Join-Path $current $marker)) {
                return $current
            }
        }
        $parent = Split-Path $current -Parent
        if ($parent -eq $current) { return $null }
        $current = $parent
    }
}

$fallbackRoot = Find-RepositoryRoot -StartDir $PSScriptRoot
if (-not $fallbackRoot) {
    Write-Error "Error: could not determine repository root"
    exit 1
}

try {
    $repoRoot = git rev-parse --show-toplevel 2>$null
    if ($LASTEXITCODE -ne 0) { throw "git unavailable" }
} catch {
    $repoRoot = $fallbackRoot
}

$chaptersDir = Join-Path $repoRoot 'chapters'
$draftDir = Join-Path $chaptersDir 'draft'
$finalDir = Join-Path $chaptersDir 'final'
$planDir = Join-Path $chaptersDir 'plan'
$editorDir = Join-Path $chaptersDir 'editor'
$timelineDir = Join-Path $repoRoot 'timelines'
$logDir = Join-Path $repoRoot 'logs/adaptations'

New-Item -ItemType Directory -Path $draftDir -Force | Out-Null
New-Item -ItemType Directory -Path $finalDir -Force | Out-Null
New-Item -ItemType Directory -Path $planDir -Force | Out-Null
New-Item -ItemType Directory -Path $editorDir -Force | Out-Null
New-Item -ItemType Directory -Path $timelineDir -Force | Out-Null
New-Item -ItemType Directory -Path $logDir -Force | Out-Null

$finalFiles = Get-ChildItem -Path $finalDir -Filter 'chapter_*_final.md' -ErrorAction SilentlyContinue
if ($finalFiles) {
    $max = $finalFiles | ForEach-Object {
        if ($_.Name -match 'chapter_(\d{3})_final\.md') {
            [int]$matches[1]
        }
    } | Measure-Object -Maximum
    $next = $max.Maximum + 1
} else {
    $next = 1
}

$chapterSlug = 'chapter_{0:000}' -f $next
$draftFile = Join-Path $draftDir "$chapterSlug`_draft.md"
$finalFile = Join-Path $finalDir "$chapterSlug`_final.md"
$planFile = Join-Path $planDir "$chapterSlug`_plan.md"
$editorLog = Join-Path $editorDir "$chapterSlug`_editor.md"

if (-not (Test-Path $draftFile)) {
    @("# $($chapterSlug -replace '_', ' ')", '', '<!-- Draft manuscript generated by /draft -->') | Set-Content -Path $draftFile
}

# Pre-compute timeline file for plan references
$rangeStart = [math]::Floor(($next - 1) / 30) * 30 + 1
$rangeEnd = $rangeStart + 29
$startLabel = '{0:000}' -f $rangeStart
$endLabel = '{0:000}' -f $rangeEnd
$timelineFile = Join-Path $timelineDir "timeline_${startLabel}-${endLabel}.md"

if (Test-Path $timelineFile) {
    $sizeBytes = (Get-Item $timelineFile).Length
    if ($sizeBytes -ge 80000) {
        $rangeStart = $rangeEnd + 1
        $rangeEnd = $rangeStart + 29
        $startLabel = '{0:000}' -f $rangeStart
        $endLabel = '{0:000}' -f $rangeEnd
        $timelineFile = Join-Path $timelineDir "timeline_${startLabel}-${endLabel}.md"
    }
}

if (-not (Test-Path $timelineFile)) {
    $templateTimeline = Join-Path $repoRoot '.specify/templates/story/timeline-template.md'
    if (Test-Path $templateTimeline) {
        (Get-Content $templateTimeline) -replace '\[RANGE\]', "$startLabel-$endLabel" | Set-Content -Path $timelineFile -NoNewline
        Add-Content -Path $timelineFile -Value ""
    } else {
        @("# Narrative Timeline $startLabel-$endLabel", '', '| Chapter | Time & Location | POV | Key Events | Consequences |', '| ------- | ---------------- | --- | ---------- | ------------ |') | Set-Content -Path $timelineFile
    }
}

if (-not (Test-Path $planFile)) {
    $template = Join-Path $repoRoot '.specify/templates/story/chapter-plan-template.md'
    $chapterTitle = "Chapter {0:000}" -f $next
    $projectOverviewPath = Join-Path $repoRoot 'project_overview.md'
    $outlinePath = Join-Path $repoRoot 'plots/outline.md'
    $arcsPath = Join-Path $repoRoot 'plots/arcs.md'
    $writerRewriteCount = '0'
    $editorOverrideCount = '0'
    if ($recentFinals) {
        $recentText = ($recentFinals | ForEach-Object { "  - $_" }) -join "`n"
    } else {
        $recentText = "  - （暂无终稿）"
    }

    if (Test-Path $template) {
        $content = Get-Content $template -Raw
        $map = @{
            '${CHAPTER_TITLE}' = $chapterTitle
            '${PROJECT_OVERVIEW_PATH}' = $projectOverviewPath
            '${OUTLINE_PATH}' = $outlinePath
            '${ARCS_PATH}' = $arcsPath
            '${TIMELINE_PATH}' = $timelineFile
            '${RECENT_FINALS}' = "$recentText`n"
            '${WRITER_REWRITE_COUNT}' = $writerRewriteCount
            '${EDITOR_OVERRIDE_COUNT}' = $editorOverrideCount
        }
        foreach ($entry in $map.GetEnumerator()) {
            $content = $content.Replace($entry.Key, $entry.Value)
        }
        Set-Content -Path $planFile -Value $content -Encoding UTF8
    } else {
        $fallback = @'
# 创作指南：${CHAPTER_TITLE}

## 1. 章节概览
- **章节定位**：
- **情绪基调**：
- **目标读感**：
- **篇幅预估**：

## 2. TODO 清单
| 序号 | 任务 | 说明 | 负责人 | 状态 |
| ---- | ---- | ---- | ------ | ---- |
| 1 | | | 写手 | 待处理 |
| 2 | | | 主编 | 待处理 |

## 3. 参考资料
- **项目概览**：${PROJECT_OVERVIEW_PATH}
- **剧情纲要**：${OUTLINE_PATH}
- **剧情线**：${ARCS_PATH}
- **时间线**：${TIMELINE_PATH}
- **近三章终稿**：
${RECENT_FINALS}
- **角色档案**：
  - （主编补充）
- **其他补充**：
  - （主编补充）

## 4. 分段结构
| 段落 | 目的 | 起止场景 | 关键情节 | 伏笔 / 呼应 |
| ---- | ---- | -------- | -------- | ------------ |
| 第一段 | | | | |
| 第二段 | | | | |
| 第三段 | | | | |
| 结尾 | | | | |

## 5. 人物要点
- **主角**：
- **关键配角 / 对手**：
- **人物状态提醒**：

## 6. 情节元素
- **必备事件**：
- **可选增强**：
- **节奏提醒**：
- **道具 / 线索**：

## 7. 风险与提醒
- 

## 8. 尝试计数
- 写手重写次数：${WRITER_REWRITE_COUNT}
- 主编接管次数：${EDITOR_OVERRIDE_COUNT}
'@
        $fallback = $fallback.Replace('${CHAPTER_TITLE}', $chapterTitle)
        $fallback = $fallback.Replace('${PROJECT_OVERVIEW_PATH}', $projectOverviewPath)
        $fallback = $fallback.Replace('${OUTLINE_PATH}', $outlinePath)
        $fallback = $fallback.Replace('${ARCS_PATH}', $arcsPath)
        $fallback = $fallback.Replace('${TIMELINE_PATH}', $timelineFile)
        $fallback = $fallback.Replace('${RECENT_FINALS}', "$recentText`n")
        $fallback = $fallback.Replace('${WRITER_REWRITE_COUNT}', $writerRewriteCount)
        $fallback = $fallback.Replace('${EDITOR_OVERRIDE_COUNT}', $editorOverrideCount)
        Set-Content -Path $planFile -Value $fallback -Encoding UTF8
    }
}

if (-not (Test-Path $editorLog)) {
    $template = Join-Path $repoRoot '.specify/templates/story/editor-review-template.md'
    if (Test-Path $template) {
        (Get-Content $template) -replace '\[CHAPTER_TITLE\]', ($chapterSlug -replace '_', ' ' ) -replace '\[ROUND\]', '1' |
            Set-Content -Path $editorLog -NoNewline
        Add-Content -Path $editorLog -Value ""
    } else {
        @("# Editor Review $($chapterSlug -replace '_', ' ')", '', '- 审稿轮次：第 1 次') | Set-Content -Path $editorLog
    }
}

$recentFinals = Get-ChildItem -Path $finalDir -Filter 'chapter_*_final.md' -ErrorAction SilentlyContinue |
    Sort-Object Name |
    Select-Object -Last 3 |
    ForEach-Object { $_.FullName }

$indexFile = Join-Path $logDir 'index.md'
if (-not (Test-Path $indexFile)) {
    @('# Adaptation Log Index', '', '- [adaptations_001-050.md](adaptations_001-050.md)') | Set-Content -Path $indexFile
}

$firstVolume = Join-Path $logDir 'adaptations_001-050.md'
if (-not (Test-Path $firstVolume)) {
    $template = Join-Path $repoRoot '.specify/templates/story/adaptation-log-template.md'
    if (Test-Path $template) {
        (Get-Content $template) -replace '\[RANGE\]', '001-050' | Set-Content -Path $firstVolume -NoNewline
        Add-Content -Path $firstVolume -Value ""
    } else {
        @('# Adaptation Log 001-050', '', '| Entry | Date | Trigger | Affected Artifacts | Summary |', '| ----- | ---- | ------- | ------------------ | ------- |') | Set-Content -Path $firstVolume
    }
}

if ($Json) {
    [pscustomobject]@{
        REPO_ROOT = $repoRoot
        NEXT_CHAPTER = $chapterSlug
        DRAFT_FILE = $draftFile
        FINAL_FILE = $finalFile
        TIMELINE_FILE = $timelineFile
        ADAPTATION_LOG = $firstVolume
        RECENT_FINALS = $recentFinals
        PLAN_FILE = $planFile
        EDITOR_LOG = $editorLog
        AUTO_COUNT = $AutoCount
    } | ConvertTo-Json -Compress
} else {
    Write-Output "REPO_ROOT: $repoRoot"
    Write-Output "NEXT_CHAPTER: $chapterSlug"
    Write-Output "DRAFT_FILE: $draftFile"
    Write-Output "FINAL_FILE: $finalFile"
    Write-Output "TIMELINE_FILE: $timelineFile"
    Write-Output "ADAPTATION_LOG: $firstVolume"
    Write-Output "PLAN_FILE: $planFile"
    Write-Output "EDITOR_LOG: $editorLog"
    Write-Output "AUTO_COUNT: $AutoCount"
    Write-Output "RECENT_FINALS:"
    if ($recentFinals) {
        foreach ($path in $recentFinals) {
            Write-Output "  - $path"
        }
    } else {
        Write-Output "  - (none yet)"
    }
}
