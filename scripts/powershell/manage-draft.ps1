#!/usr/bin/env pwsh
[CmdletBinding()]
param(
    [switch]$Json
)
$ErrorActionPreference = 'Stop'

function Find-RepositoryRoot {
    param(
        [string]$StartDir,
        [string[]]$Markers = @('.git', '.specify', 'chapters')
    )
    $current = Resolve-Path $StartDir
    while ($true) {
        foreach ($marker in $Markers) {
            if (Test-Path (Join-Path $current $marker)) {
                return $current
            }
        }
        $parent = Split-Path $current -Parent
        if ($parent -eq $current) { return $null }
        $current = $parent
    }
}

$fallbackRoot = Find-RepositoryRoot -StartDir $PSScriptRoot
if (-not $fallbackRoot) {
    Write-Error "Error: could not determine repository root"
    exit 1
}

try {
    $repoRoot = git rev-parse --show-toplevel 2>$null
    if ($LASTEXITCODE -ne 0) { throw "git unavailable" }
} catch {
    $repoRoot = $fallbackRoot
}

$chaptersDir = Join-Path $repoRoot 'chapters'
$draftDir = Join-Path $chaptersDir 'draft'
$finalDir = Join-Path $chaptersDir 'final'
$timelineDir = Join-Path $repoRoot 'timelines'
$logDir = Join-Path $repoRoot 'logs/adaptations'

New-Item -ItemType Directory -Path $draftDir -Force | Out-Null
New-Item -ItemType Directory -Path $finalDir -Force | Out-Null
New-Item -ItemType Directory -Path $timelineDir -Force | Out-Null
New-Item -ItemType Directory -Path $logDir -Force | Out-Null

$finalFiles = Get-ChildItem -Path $finalDir -Filter 'chapter_*_final.md' -ErrorAction SilentlyContinue
if ($finalFiles) {
    $max = $finalFiles | ForEach-Object {
        if ($_.Name -match 'chapter_(\d{3})_final\.md') {
            [int]$matches[1]
        }
    } | Measure-Object -Maximum
    $next = $max.Maximum + 1
} else {
    $next = 1
}

$chapterSlug = 'chapter_{0:000}' -f $next
$draftFile = Join-Path $draftDir "$chapterSlug`_draft.md"
$finalFile = Join-Path $finalDir "$chapterSlug`_final.md"

if (-not (Test-Path $draftFile)) {
    @("# $($chapterSlug -replace '_', ' ')", '', '<!-- Draft manuscript generated by /draft -->') | Set-Content -Path $draftFile
}

$rangeStart = [math]::Floor(($next - 1) / 30) * 30 + 1
$rangeEnd = $rangeStart + 29
$startLabel = '{0:000}' -f $rangeStart
$endLabel = '{0:000}' -f $rangeEnd
$timelineFile = Join-Path $timelineDir "timeline_${startLabel}-${endLabel}.md"

if (Test-Path $timelineFile) {
    $sizeBytes = (Get-Item $timelineFile).Length
    if ($sizeBytes -ge 80000) {
        $rangeStart = $rangeEnd + 1
        $rangeEnd = $rangeStart + 29
        $startLabel = '{0:000}' -f $rangeStart
        $endLabel = '{0:000}' -f $rangeEnd
        $timelineFile = Join-Path $timelineDir "timeline_${startLabel}-${endLabel}.md"
    }
}

if (-not (Test-Path $timelineFile)) {
    $template = Join-Path $repoRoot '.specify/templates/story/timeline-template.md'
    if (Test-Path $template) {
        (Get-Content $template) -replace '\[RANGE\]', "$startLabel-$endLabel" | Set-Content -Path $timelineFile -NoNewline
        Add-Content -Path $timelineFile -Value ""
    } else {
        @("# Narrative Timeline $startLabel-$endLabel", '', '| Chapter | Time & Location | POV | Key Events | Consequences |', '| ------- | ---------------- | --- | ---------- | ------------ |') | Set-Content -Path $timelineFile
    }
}

$indexFile = Join-Path $logDir 'index.md'
if (-not (Test-Path $indexFile)) {
    @('# Adaptation Log Index', '', '- [adaptations_001-050.md](adaptations_001-050.md)') | Set-Content -Path $indexFile
}

$firstVolume = Join-Path $logDir 'adaptations_001-050.md'
if (-not (Test-Path $firstVolume)) {
    $template = Join-Path $repoRoot '.specify/templates/story/adaptation-log-template.md'
    if (Test-Path $template) {
        (Get-Content $template) -replace '\[RANGE\]', '001-050' | Set-Content -Path $firstVolume -NoNewline
        Add-Content -Path $firstVolume -Value ""
    } else {
        @('# Adaptation Log 001-050', '', '| Entry | Date | Trigger | Affected Artifacts | Summary |', '| ----- | ---- | ------- | ------------------ | ------- |') | Set-Content -Path $firstVolume
    }
}

if ($Json) {
    [pscustomobject]@{
        REPO_ROOT = $repoRoot
        NEXT_CHAPTER = $chapterSlug
        DRAFT_FILE = $draftFile
        FINAL_FILE = $finalFile
        TIMELINE_FILE = $timelineFile
        ADAPTATION_LOG = $firstVolume
    } | ConvertTo-Json -Compress
} else {
    Write-Output "REPO_ROOT: $repoRoot"
    Write-Output "NEXT_CHAPTER: $chapterSlug"
    Write-Output "DRAFT_FILE: $draftFile"
    Write-Output "FINAL_FILE: $finalFile"
    Write-Output "TIMELINE_FILE: $timelineFile"
    Write-Output "ADAPTATION_LOG: $firstVolume"
}
